/*\
title: $:/plugins/chgl29/learncards/learnControll.js
type: application/javascript
module-type: widget

learnControll widget

<$learnCard question="question text" answer="answer text">

\*/

(function(){
var Widget = require("$:/core/modules/widgets/widget.js").widget;
var test = require("$:/core/modules/widgets/fieldmangler.js").widget;
var learnControllWidget = function(parseTreeNode,options) {
	this.initialise(parseTreeNode,options);
};

/*
Inherit from the base widget class
*/
learnControllWidget.prototype = new Widget();

learnControllWidget.prototype.render = function(parent,nextSibling){
this.parentDomNode = parent;
	this.computeAttributes();
	this.execute();
	var domNode = this.create(parent,nextSibling);
	this.domNodes.push(domNode);
	parent.insertBefore(domNode,nextSibling);
	this.renderChildren(parent,nextSibling);

};
learnControllWidget.prototype.execute = function(){
	this.answer = this.getAttribute("answer");
	this.question = this.getAttribute("question");
	this.tagsInited=false;
	this.selectClass = this.getAttribute("class");
 	this.tiddler = this.getVariable("currentTiddler");
	this.mangleTitle = this.getAttribute("tiddler",this.getVariable("currentTiddler"));
	this.makeChildWidgets();
};
learnControllWidget.prototype.removeChildDomNodes = function(){

};
learnControllWidget.prototype.create = function(){
var that = this;
var domNode = $tw.utils.domMaker("div",{class:this.selectClass});
var answerDiv = this.document.createElement("DIV");
answerDiv.style.display="none";
answerDiv.style.textAlign="center";
answerDiv.appendChild(this.document.createTextNode(this.answer));
answerDiv.appendChild(this.document.createElement("BR"));

var questionDiv = this.document.createElement("DIV");
questionDiv.appendChild(this.document.createTextNode(this.question));
questionDiv.appendChild(this.document.createElement("BR"));
questionDiv.style.textAlign="center";
var buttonShowAnswer = this.document.createElement("INPUT");
buttonShowAnswer.setAttribute("type","BUTTON");
buttonShowAnswer.value="show Answer";
buttonShowAnswer.addEventListener("click",function(){answerDiv.style.display="block";questionDiv.style.display="none";});


var buttonFail = this.document.createElement("INPUT");
buttonFail.setAttribute("type","BUTTON");
buttonFail.value="fail";
buttonFail.addEventListener("click",function (){that.addTag("fail");that.removeTag("success")});

var buttonSuccess = this.document.createElement("INPUT");
buttonSuccess.setAttribute("type","BUTTON");
buttonSuccess.value="success";
buttonSuccess.addEventListener("click",function (){that.addTag("success");that.removeTag("fail")});
var buttonShowQuestion = this.document.createElement("INPUT");
buttonShowQuestion.setAttribute("type","BUTTON");
buttonShowQuestion.value="show Question";
buttonShowQuestion.addEventListener("click",function(){answerDiv.style.display="none";questionDiv.style.display="block";});


domNode.appendChild(questionDiv);
domNode.appendChild(answerDiv);
questionDiv.appendChild(buttonShowAnswer);
answerDiv.appendChild(buttonFail);
answerDiv.appendChild(buttonShowQuestion);
answerDiv.appendChild(buttonSuccess);
return domNode;
};

learnControllWidget.prototype.refresh = function(changedTiddlers) {
	this.addTag("learnCard");
	var changedAttributes = this.computeAttributes();
	if(changedAttributes.question || changedAttributes.answer) {
		this.addTag("new");
		this.refreshSelf();
		return true;
	}
	return this.refreshChildren(changedTiddlers);
};

// Source from core/modules/widgets/fieldmangler.js
learnControllWidget.prototype.removeTag = function(tag){
var tiddler = this.wiki.getTiddler(this.mangleTitle);
var modification = this.wiki.getModificationFields();
if(!tiddler.fields.tags){
return;
}
var p = tiddler.fields.tags.indexOf(tag);
		if(p !== -1) {
			modification.tags = (tiddler.fields.tags || []).slice(0);
			modification.tags.splice(p,1);
			if(modification.tags.length === 0) {
				modification.tags = undefined;
			}
		this.wiki.addTiddler(new $tw.Tiddler(tiddler,modification));
		}
};
// Source from core/modules/widgets/fieldmangler.js
learnControllWidget.prototype.addTag = function(tag){
var tiddler = this.wiki.getTiddler(this.mangleTitle);
var modification = this.wiki.getModificationFields();
modification.tags = (tiddler.fields.tags || []).slice(0);
			$tw.utils.pushTop(modification.tags,tag);
			this.wiki.addTiddler(new $tw.Tiddler(tiddler,modification));
};

exports.learnCard = learnControllWidget;
})();
